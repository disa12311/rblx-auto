# bot/cogs/rblx.py

import logging
import discord
from discord.commands import Option
from discord.ext import commands, tasks
from discord.ext.commands import is_owner
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException

# Import t·ª´ c√°c file trong d·ª± √°n
from config import *
from selenium_handler.driver_setup import create_driver
from database.db_handler import get_command_stats, log_command

logger = logging.getLogger(__name__)

class RblxCog(commands.Cog):
    """Cog ch·ª©a t·∫•t c·∫£ c√°c l·ªánh t∆∞∆°ng t√°c v·ªõi website rblx.earth."""
    
    def __init__(self, bot: commands.Bot, driver: WebDriver):
        self.bot = bot
        self.driver = driver
        self.auto_giveaway_enabled = False
        self.giveaway_task.start()
        logger.info("RobloxCog ƒë√£ ƒë∆∞·ª£c t·∫£i. T√°c v·ª• Auto Giveaway ƒë√£ s·∫µn s√†ng.")

    def cog_unload(self):
        self.giveaway_task.cancel()

    # --- C√ÅC H√ÄM H·ªñ TR·ª¢ V√Ä S·ª∞ KI·ªÜN ---

    async def handle_error(self, ctx: discord.ApplicationContext, error: Exception, command_name: str):
        logger.error(f"L·ªói trong l·ªánh /{command_name}: {error}", exc_info=True)
        embed = discord.Embed(
            title=f"‚ùå L·ªói khi th·ª±c thi `/{command_name}`",
            description="ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau. N·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn, h√£y ki·ªÉm tra log ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
            color=discord.Color.red()
        )
        try:
            await ctx.edit(embed=embed)
        except:
            await ctx.respond(embed=embed, ephemeral=True)

    async def is_logged_in(self):
        try:
            self.driver.find_element(By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)
            return True
        except:
            return False

    @commands.Cog.listener()
    async def on_application_command(self, ctx: discord.ApplicationContext):
        """S·ª± ki·ªán n√†y ƒë∆∞·ª£c k√≠ch ho·∫°t m·ªói khi m·ªôt l·ªánh slash ƒë∆∞·ª£c g·ªçi ƒë·ªÉ ghi log v√†o DB."""
        log_command(ctx.author.id, str(ctx.author), ctx.command.name)
        logger.info(f"Command '{ctx.command.name}' used by '{ctx.author}' (ID: {ctx.author.id})")

    # --- V√íNG L·∫∂P T·ª∞ ƒê·ªòNG ---
    @tasks.loop(hours=GIVEAWAY_CHECK_INTERVAL_HOURS)
    async def giveaway_task(self):
        if not self.auto_giveaway_enabled: return
        if not await self.is_logged_in():
            logger.warning("Auto Giveaway: Bot ch∆∞a ƒëƒÉng nh·∫≠p, b·ªè qua.")
            return
            
        logger.info("Auto Giveaway: B·∫Øt ƒë·∫ßu chu tr√¨nh...")
        try:
            self.driver.get(f"{WEBSITE_URL}giveaways")
            join_button = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.element_to_be_clickable((By.XPATH, Selectors.JOIN_GIVEAWAY_BUTTON)))
            join_button.click()
            success_message = "‚úÖ **Auto Giveaway:** ƒê√£ t·ª± ƒë·ªông tham gia giveaway th√†nh c√¥ng!"
            logger.info(success_message)
            if STATUS_CHANNEL_ID:
                channel = self.bot.get_channel(STATUS_CHANNEL_ID)
                if channel: await channel.send(embed=discord.Embed(description=success_message, color=discord.Color.green()))
        except WebDriverException as e:
            logger.error(f"Auto Giveaway: WebDriver b·ªã l·ªói! ƒêang c·ªë g·∫Øng kh·ªüi ƒë·ªông l·∫°i... L·ªói: {e}")
            try:
                if self.driver: self.driver.quit()
                self.driver = create_driver()
                logger.info("Auto Giveaway: ƒê√£ t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i WebDriver.")
            except Exception as restart_e:
                logger.critical(f"Auto Giveaway: KH√îNG TH·ªÇ kh·ªüi ƒë·ªông l·∫°i WebDriver. T√°c v·ª• s·∫Ω t·∫°m d·ª´ng. L·ªói: {restart_e}")
                self.auto_giveaway_enabled = False
        except Exception as e:
            logger.error(f"Auto Giveaway: L·ªói trong qu√° tr√¨nh tham gia: {e}", exc_info=True)
            if STATUS_CHANNEL_ID:
                channel = self.bot.get_channel(STATUS_CHANNEL_ID)
                if channel: await channel.send(embed=discord.Embed(description=f"‚ùå **Auto Giveaway:** G·∫∑p l·ªói khi c·ªë g·∫Øng tham gia.", color=discord.Color.red()))

    @giveaway_task.before_loop
    async def before_giveaway_task(self):
        await self.bot.wait_until_ready()

    # === C√ÅC L·ªÜNH QU·∫¢N TR·ªä (CH·ª¶ BOT) ===
    @commands.slash_command(name="restart_selenium", description="(Ch·ªß bot) Kh·ªüi ƒë·ªông l·∫°i tr√¨nh duy·ªát Selenium.")
    @is_owner()
    async def restart_selenium(self, ctx: discord.ApplicationContext):
        await ctx.defer(ephemeral=True)
        logger.info(f"Y√™u c·∫ßu kh·ªüi ƒë·ªông l·∫°i Selenium t·ª´ {ctx.author.name}...")
        try:
            if self.driver: self.driver.quit()
            self.driver = create_driver()
            await ctx.edit(embed=discord.Embed(description="‚úÖ Tr√¨nh duy·ªát Selenium ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng.", color=discord.Color.green()))
        except Exception as e: await self.handle_error(ctx, e, "restart_selenium")

    @commands.slash_command(name="logs", description="(Ch·ªß bot) L·∫•y c√°c d√≤ng log cu·ªëi c√πng t·ª´ file.")
    @is_owner()
    async def get_logs(self, ctx, lines: Option(int, "S·ªë d√≤ng log.", min_value=1, max_value=100, default=20)):
        await ctx.defer(ephemeral=True)
        try:
            with open("bot.log", "r", encoding="utf-8") as f:
                log_content = "".join(f.readlines()[-lines:])
            if not log_content:
                await ctx.edit(embed=discord.Embed(description="File log tr·ªëng.", color=discord.Color.orange()))
                return
            if len(log_content) > 1900:
                with open("log.txt", "w", encoding="utf-8") as f: f.write(log_content)
                await ctx.edit(content=f"Log qu√° d√†i, t√¥i ƒë√£ g·ª≠i n√≥ d∆∞·ªõi d·∫°ng file.", file=discord.File("log.txt"))
            else:
                await ctx.edit(embed=discord.Embed(title=f"üìÑ {lines} d√≤ng log cu·ªëi c√πng", description=f"```log\n{log_content}\n```", color=BOT_COLOR))
        except Exception as e: await self.handle_error(ctx, e, "logs")

    @commands.slash_command(name="stats", description="(Ch·ªß bot) Xem th·ªëng k√™ s·ª≠ d·ª•ng l·ªánh.")
    @is_owner()
    async def stats(self, ctx: discord.ApplicationContext):
        await ctx.defer(ephemeral=True)
        try:
            stats_data = get_command_stats()
            if not stats_data:
                await ctx.edit(embed=discord.Embed(description="Ch∆∞a c√≥ d·ªØ li·ªáu th·ªëng k√™ n√†o.", color=discord.Color.orange()))
                return
            
            embed = discord.Embed(title="üìä Th·ªëng k√™ s·ª≠ d·ª•ng l·ªánh", color=discord.Color.blue())
            description = ""
            for row in stats_data:
                description += f"**/{row['command_name']}**: {row['count']} l·∫ßn\n"
            embed.description = description
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "stats")
        
    @restart_selenium.error
    @get_logs.error
    @stats.error
    async def on_owner_error(self, ctx, error):
        if isinstance(error, commands.NotOwner):
            await ctx.respond("‚ùå L·ªánh n√†y ch·ªâ d√†nh cho ch·ªß s·ªü h·ªØu c·ªßa bot.", ephemeral=True)

    # === C√ÅC L·ªÜNH NG∆Ø·ªúI D√ôNG & T·ª∞ ƒê·ªòNG H√ìA ===
    @commands.slash_command(name="auto_giveaway", description="B·∫≠t/T·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông tham gia giveaway.")
    async def auto_giveaway(self, ctx, status: Option(str, "Ch·ªçn ƒë·ªÉ B·∫≠t ho·∫∑c T·∫Øt.", choices=["On", "Off"], required=True)):
        await ctx.defer(ephemeral=True)
        if status == "On":
            self.auto_giveaway_enabled = True
            if not self.giveaway_task.is_running(): self.giveaway_task.start()
            embed = discord.Embed(title="‚úÖ Auto Giveaway ƒê√£ B·∫≠t", description=f"Bot s·∫Ω t·ª± tham gia m·ªói **{GIVEAWAY_CHECK_INTERVAL_HOURS}** gi·ªù.", color=discord.Color.green())
            await ctx.edit(embed=embed)
        else:
            self.auto_giveaway_enabled = False
            embed = discord.Embed(title="‚ùå Auto Giveaway ƒê√£ T·∫Øt", description="Bot s·∫Ω kh√¥ng t·ª± ƒë·ªông tham gia n·ªØa.", color=discord.Color.red())
            await ctx.edit(embed=embed)

    @commands.slash_command(name="start", description="Li√™n k·∫øt t√†i kho·∫£n Roblox c·ªßa b·∫°n.")
    async def start(self, ctx, roblox_username: Option(str, "T√™n ng∆∞·ªùi d√πng Roblox.", required=True)):
        await ctx.defer()
        try:
            self.driver.get(WEBSITE_URL)
            user_field = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, Selectors.USERNAME_INPUT)))
            self.driver.execute_script("arguments[0].value = arguments[1];", user_field, roblox_username)
            self.driver.find_element(By.XPATH, Selectors.LINK_ACCOUNT_BUTTON).click()
            WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)))
            embed = discord.Embed(title="‚úÖ Li√™n k·∫øt th√†nh c√¥ng!", description=f"Bot ƒë√£ li√™n k·∫øt v·ªõi t√†i kho·∫£n: **{roblox_username}**.", color=discord.Color.green())
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "start")

    @commands.slash_command(name="balance", description="Ki·ªÉm tra s·ªë d∆∞ Robux hi·ªán t·∫°i.")
    async def balance(self, ctx: discord.ApplicationContext):
        await ctx.defer(ephemeral=True)
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange())); return
            balance_element = self.driver.find_element(By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)
            balance_text = balance_element.find_element(By.TAG_NAME, "span").text
            embed = discord.Embed(title="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", description=f"S·ªë d∆∞ c·ªßa b·∫°n l√†: **{balance_text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "balance")

    @commands.slash_command(name="promo", description="Nh·∫≠p m√£ khuy·∫øn m√£i.")
    async def promo(self, ctx, code: Option(str, "M√£ khuy·∫øn m√£i.", required=True)):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange())); return
            self.driver.get(f"{WEBSITE_URL}promocodes")
            promo_field = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, Selectors.PROMO_CODE_INPUT)))
            self.driver.execute_script("arguments[0].value = arguments[1];", promo_field, code)
            self.driver.find_element(By.XPATH, Selectors.PROMO_REDEEM_BUTTON).click()
            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.ID, Selectors.PROMO_RESULT_POPUP)))
            embed = discord.Embed(title="üéÅ K·∫øt qu·∫£ nh·∫≠p m√£", description=f"M√£ `{code}`: **{result_popup.text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "promo")
        
    @commands.slash_command(name="claim_reward", description="T·ª± ƒë·ªông nh·∫≠n ph·∫ßn th∆∞·ªüng h√†ng ng√†y (n·∫øu c√≥).")
    async def claim_reward(self, ctx: discord.ApplicationContext):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange())); return
            self.driver.get(f"{WEBSITE_URL}rewards")
            claim_button = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.element_to_be_clickable((By.XPATH, Selectors.CLAIM_REWARD_BUTTON)))
            claim_button.click()
            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.ID, Selectors.PROMO_RESULT_POPUP)))
            await ctx.edit(embed=discord.Embed(title="üéÅ Nh·∫≠n th∆∞·ªüng", description=f"K·∫øt qu·∫£: **{result_popup.text}**", color=BOT_COLOR))
        except TimeoutException:
            await ctx.edit(embed=discord.Embed(title="üéÅ Nh·∫≠n th∆∞·ªüng", description="Kh√¥ng t√¨m th·∫•y n√∫t nh·∫≠n th∆∞·ªüng. C√≥ th·ªÉ b·∫°n ƒë√£ nh·∫≠n r·ªìi ho·∫∑c kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng n√†o.", color=discord.Color.orange()))
        except Exception as e: await self.handle_error(ctx, e, "claim_reward")

    @commands.slash_command(name="redeem", description="T·ª± ƒë·ªông r√∫t Robux v·ªÅ t√†i kho·∫£n c·ªßa b·∫°n.")
    async def redeem(self, ctx, amount: Option(int, "S·ªë l∆∞·ª£ng Robux mu·ªën r√∫t.", min_value=1)):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange())); return
            self.driver.get(f"{WEBSITE_URL}redeem")
            amount_input = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, Selectors.REDEEM_AMOUNT_INPUT)))
            self.driver.execute_script("arguments[0].value = arguments[1];", amount_input, amount)
            self.driver.find_element(By.XPATH, Selectors.REDEEM_BUTTON).click()
            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.ID, Selectors.PROMO_RESULT_POPUP)))
            await ctx.edit(embed=discord.Embed(title="üí∏ R√∫t Robux", description=f"K·∫øt qu·∫£ r√∫t **{amount} R$**: **{result_popup.text}**", color=discord.Color.green()))
        except Exception as e: await self.handle_error(ctx, e, "redeem")

    @commands.slash_command(name="send_to", description="G·ª≠i m·ªôt tin nh·∫Øn nh√∫ng (embed) ƒë·∫øn k√™nh ho·∫∑c DM.")
    async def send_to(self, ctx, title: Option(str, "Ti√™u ƒë·ªÅ c·ªßa tin nh·∫Øn embed.", required=True), description: Option(str, "N·ªôi dung c·ªßa tin nh·∫Øn embed.", required=True), send_dm: Option(str, "G·ª≠i DM cho b·∫°n?", choices=["On", "Off"]), channel: Option(discord.TextChannel, "K√™nh mu·ªën g·ª≠i.", required=False)):
        await ctx.defer(ephemeral=True)
        if not channel and send_dm == "Off":
            await ctx.edit(embed=discord.Embed(description="‚ùå B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt n∆°i ƒë·ªÉ g·ª≠i.", color=discord.Color.red)); return
        embed = discord.Embed(title=title, description=description, color=BOT_COLOR).set_footer(text=f"G·ª≠i b·ªüi {ctx.author.name}", icon_url=ctx.author.display_avatar.url)
        sent_locations, error_locations = [], []
        if channel:
            try: await channel.send(embed=embed); sent_locations.append(f"k√™nh {channel.mention}")
            except: error_locations.append(f"k√™nh {channel.mention} (thi·∫øu quy·ªÅn)")
        if send_dm == "On":
            try: await ctx.author.send(embed=embed); sent_locations.append("DM c·ªßa b·∫°n")
            except: error_locations.append("DM c·ªßa b·∫°n (ƒë√£ ch·∫∑n)")
        response_parts = []
        if sent_locations: response_parts.append(f"‚úÖ G·ª≠i th√†nh c√¥ng ƒë·∫øn: {', '.join(sent_locations)}.")
        if error_locations: response_parts.append(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i ƒë·∫øn: {', '.join(error_locations)}.")
        await ctx.edit(content="\n".join(response_parts))

def setup(bot, driver):
    """H√†m thi·∫øt l·∫≠p ƒë·ªÉ bot c√≥ th·ªÉ load Cog n√†y."""
    bot.add_cog(RblxCog(bot, driver))
