# bot/cogs/rblx.py

import logging
import discord
from discord.commands import Option
from discord.ext import commands, tasks
from discord.ext.commands import is_owner
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.common.exceptions import WebDriverException

# Import c√°c service, config v√† DB handlers
from config import *
from selenium_handler.driver_setup import create_driver
from database.db_handler import get_command_stats, log_command
from services import rblx_service
from services.rblx_service import LoginRequiredError, ActionFailedError

logger = logging.getLogger(__name__)

class RblxCog(commands.Cog):
    def __init__(self, bot: commands.Bot, driver: WebDriver):
        self.bot = bot
        self.driver = driver
        self.auto_giveaway_enabled = False
        self.giveaway_task.start()
        logger.info("RobloxCog ƒë√£ ƒë∆∞·ª£c t·∫£i.")

    def cog_unload(self):
        self.giveaway_task.cancel()

    async def handle_error(self, ctx: discord.ApplicationContext, error: Exception, command_name: str):
        logger.error(f"L·ªói trong l·ªánh /{command_name}: {error}", exc_info=True)
        embed = discord.Embed(title=f"‚ùå L·ªói khi th·ª±c thi `/{command_name}`", description="ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Chi ti·∫øt ƒë√£ ƒë∆∞·ª£c ghi l·∫°i trong log.", color=discord.Color.red())
        try:
            await ctx.edit(embed=embed)
        except:
            await ctx.respond(embed=embed, ephemeral=True)

    @commands.Cog.listener()
    async def on_application_command(self, ctx: discord.ApplicationContext):
        log_command(ctx.author.id, str(ctx.author), ctx.command.name)
        logger.info(f"Command '{ctx.command.name}' used by '{ctx.author}' (ID: {ctx.author.id})")

    # --- V√íNG L·∫∂P T·ª∞ ƒê·ªòNG ---
    @tasks.loop(hours=GIVEAWAY_CHECK_INTERVAL_HOURS)
    async def giveaway_task(self):
        if not self.auto_giveaway_enabled: return
        try:
            if not rblx_service.get_balance(self.driver): # D√πng get_balance nh∆∞ m·ªôt c√°ch ki·ªÉm tra ƒëƒÉng nh·∫≠p
                 logger.warning("Auto Giveaway: Bot ch∆∞a ƒëƒÉng nh·∫≠p, b·ªè qua."); return
            
            logger.info("Auto Giveaway: B·∫Øt ƒë·∫ßu chu tr√¨nh...")
            rblx_service.join_giveaway(self.driver)
            success_message = "‚úÖ **Auto Giveaway:** ƒê√£ t·ª± ƒë·ªông tham gia giveaway th√†nh c√¥ng!"
            logger.info(success_message)
            if STATUS_CHANNEL_ID:
                channel = self.bot.get_channel(STATUS_CHANNEL_ID)
                if channel: await channel.send(embed=discord.Embed(description=success_message, color=discord.Color.green()))
        except (LoginRequiredError, ActionFailedError) as e:
            logger.warning(f"Auto Giveaway: B·ªè qua l·∫ßn n√†y do: {e}")
        except WebDriverException as e:
            logger.error(f"Auto Giveaway: WebDriver b·ªã l·ªói! ƒêang c·ªë g·∫Øng kh·ªüi ƒë·ªông l·∫°i...", exc_info=True)
            try:
                if self.driver: self.driver.quit()
                self.driver = create_driver()
                logger.info("Auto Giveaway: ƒê√£ t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i WebDriver.")
            except Exception as restart_e:
                logger.critical(f"Auto Giveaway: KH√îNG TH·ªÇ kh·ªüi ƒë·ªông l·∫°i WebDriver. T√°c v·ª• s·∫Ω t·∫°m d·ª´ng.", exc_info=True)
                self.auto_giveaway_enabled = False
        except Exception as e:
            logger.error(f"Auto Giveaway: L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tham gia: {e}", exc_info=True)

    @giveaway_task.before_loop
    async def before_giveaway_task(self):
        await self.bot.wait_until_ready()

    # === L·ªÜNH QU·∫¢N TR·ªä ===
    @commands.slash_command(name="restart_selenium", description="(Ch·ªß bot) Kh·ªüi ƒë·ªông l·∫°i tr√¨nh duy·ªát Selenium.")
    @is_owner()
    async def restart_selenium(self, ctx):
        await ctx.defer(ephemeral=True)
        try:
            if self.driver: self.driver.quit()
            self.driver = create_driver()
            await ctx.edit(embed=discord.Embed(description="‚úÖ Selenium ƒë√£ kh·ªüi ƒë·ªông l·∫°i.", color=discord.Color.green()))
        except Exception as e: await self.handle_error(ctx, e, "restart_selenium")
    
    # ... C√°c l·ªánh /logs, /stats, v√† error handler c·ªßa ch√∫ng gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc ...

    # === L·ªÜNH NG∆Ø·ªúI D√ôNG ===
    @commands.slash_command(name="auto_giveaway", description="B·∫≠t/T·∫Øt t·ª± ƒë·ªông tham gia giveaway.")
    async def auto_giveaway(self, ctx, status: Option(str, "Ch·ªçn ƒë·ªÉ B·∫≠t ho·∫∑c T·∫Øt.", choices=["On", "Off"])):
        # ... Logic l·ªánh n√†y gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc ...
        pass
        
    @commands.slash_command(name="start", description="Li√™n k·∫øt t√†i kho·∫£n Roblox.")
    async def start(self, ctx, roblox_username: Option(str, "T√™n ng∆∞·ªùi d√πng Roblox.", required=True)):
        await ctx.defer()
        try:
            rblx_service.start_session(self.driver, roblox_username)
            embed = discord.Embed(title="‚úÖ Li√™n k·∫øt th√†nh c√¥ng!", description=f"ƒê√£ li√™n k·∫øt v·ªõi: **{roblox_username}**.", color=discord.Color.green())
            await ctx.edit(embed=embed)
        except ActionFailedError as e:
            await ctx.edit(embed=discord.Embed(title="‚ùå Th·∫•t b·∫°i", description=str(e), color=discord.Color.red()))
        except Exception as e: await self.handle_error(ctx, e, "start")

    @commands.slash_command(name="balance", description="Ki·ªÉm tra s·ªë d∆∞ Robux.")
    async def balance(self, ctx):
        await ctx.defer(ephemeral=True)
        try:
            balance_text = rblx_service.get_balance(self.driver)
            embed = discord.Embed(title="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", description=f"S·ªë d∆∞ c·ªßa b·∫°n l√†: **{balance_text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)
        except LoginRequiredError as e:
            await ctx.edit(embed=discord.Embed(title="‚ùå Y√™u c·∫ßu ƒëƒÉng nh·∫≠p", description=str(e), color=discord.Color.orange()))
        except Exception as e: await self.handle_error(ctx, e, "balance")

    @commands.slash_command(name="promo", description="Nh·∫≠p m√£ khuy·∫øn m√£i.")
    async def promo(self, ctx, code: Option(str, "M√£ khuy·∫øn m√£i.", required=True)):
        await ctx.defer()
        try:
            # D√πng get_balance nh∆∞ m·ªôt c√°ch ki·ªÉm tra ƒëƒÉng nh·∫≠p nhanh
            await rblx_service.get_balance(self.driver)
            result_text = rblx_service.enter_promo_code(self.driver, code)
            embed = discord.Embed(title="üéÅ K·∫øt qu·∫£ nh·∫≠p m√£", description=f"M√£ `{code}`: **{result_text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)
        except LoginRequiredError as e:
            await ctx.edit(embed=discord.Embed(title="‚ùå Y√™u c·∫ßu ƒëƒÉng nh·∫≠p", description=str(e), color=discord.Color.orange()))
        except ActionFailedError as e:
            await ctx.edit(embed=discord.Embed(title="‚ùå Th·∫•t b·∫°i", description=str(e), color=discord.Color.red()))
        except Exception as e: await self.handle_error(ctx, e, "promo")

    # ... T∆∞∆°ng t·ª±, b·∫°n s·∫Ω t√°i c·∫•u tr√∫c c√°c l·ªánh /claim_reward, /redeem, /send_to ƒë·ªÉ g·ªçi c√°c h√†m t·ª´ rblx_service ...

def setup(bot, driver):
    bot.add_cog(RblxCog(bot, driver))
