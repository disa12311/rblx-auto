# bot/cogs/rblx.py

import logging
import discord
from discord.commands import Option
from discord.ext import commands, tasks
from discord.ext.commands import is_owner
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import WebDriverException, TimeoutException

from config import *
from selenium_handler.driver_setup import create_driver
from database.db_handler import get_command_stats

logger = logging.getLogger(__name__)

class RblxCog(commands.Cog):
    """Cog ch·ª©a t·∫•t c·∫£ c√°c l·ªánh t∆∞∆°ng t√°c v·ªõi website rblx.earth."""
    
    def __init__(self, bot: commands.Bot, driver: WebDriver):
        self.bot = bot
        self.driver = driver
        self.auto_giveaway_enabled = False
        self.giveaway_task.start()
        logger.info("RobloxCog ƒë√£ ƒë∆∞·ª£c t·∫£i. T√°c v·ª• Auto Giveaway ƒë√£ s·∫µn s√†ng.")

    def cog_unload(self):
        self.giveaway_task.cancel()

    # (T·ªêI ∆ØU) H√†m x·ª≠ l√Ω l·ªói gi·ªù s·∫Ω g·ª≠i Embed
    async def handle_error(self, ctx: discord.ApplicationContext, error: Exception, command_name: str):
        logger.error(f"L·ªói trong l·ªánh /{command_name}: {error}", exc_info=True)
        embed = discord.Embed(
            title=f"‚ùå L·ªói khi th·ª±c thi `/{command_name}`",
            description="ƒê√£ c√≥ l·ªói kh√¥ng mong mu·ªën x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau. N·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn, h√£y ki·ªÉm tra log ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n.",
            color=discord.Color.red()
        )
        # C·ªë g·∫Øng edit ph·∫£n h·ªìi, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ send m·ªõi
        try:
            await ctx.edit(embed=embed)
        except:
            await ctx.respond(embed=embed, ephemeral=True)

    async def is_logged_in(self):
        try:
            self.driver.find_element(By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)
            return True
        except:
            return False

    # --- V√íNG L·∫∂P T·ª∞ ƒê·ªòNG ---
    @tasks.loop(hours=GIVEAWAY_CHECK_INTERVAL_HOURS)
    async def giveaway_task(self):
        # ... Logic kh√¥ng thay ƒë·ªïi nhi·ªÅu ...
        pass # Gi·ªØ nguy√™n logic t·ª´ phi√™n b·∫£n tr∆∞·ªõc

    @giveaway_task.before_loop
    async def before_giveaway_task(self):
        await self.bot.wait_until_ready()

    # === C√ÅC L·ªÜNH NG∆Ø·ªúI D√ôNG & T·ª∞ ƒê·ªòNG H√ìA ===

    @commands.slash_command(name="start", description="Li√™n k·∫øt t√†i kho·∫£n Roblox c·ªßa b·∫°n.")
    async def start(self, ctx, roblox_username: Option(str, "T√™n ng∆∞·ªùi d√πng Roblox.", required=True)):
        await ctx.defer()
        try:
            self.driver.get(WEBSITE_URL)
            user_field = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, Selectors.USERNAME_INPUT)))
            self.driver.execute_script("arguments[0].value = arguments[1];", user_field, roblox_username)
            self.driver.find_element(By.XPATH, Selectors.LINK_ACCOUNT_BUTTON).click()
            WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)))
            
            embed = discord.Embed(title="‚úÖ Li√™n k·∫øt th√†nh c√¥ng!", description=f"Bot ƒë√£ li√™n k·∫øt th√†nh c√¥ng v·ªõi t√†i kho·∫£n Roblox: **{roblox_username}**.", color=discord.Color.green())
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "start")

    @commands.slash_command(name="balance", description="Ki·ªÉm tra s·ªë d∆∞ Robux hi·ªán t·∫°i.")
    async def balance(self, ctx: discord.ApplicationContext):
        await ctx.defer(ephemeral=True)
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange()))
                return
            balance_element = self.driver.find_element(By.CLASS_NAME, Selectors.USER_BALANCE_CONTAINER)
            balance_text = balance_element.find_element(By.TAG_NAME, "span").text
            embed = discord.Embed(title="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", description=f"S·ªë d∆∞ c·ªßa b·∫°n l√†: **{balance_text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)
        except Exception as e: await self.handle_error(ctx, e, "balance")

    # (M·ªöI) L·ªÜNH NH·∫¨N TH∆Ø·ªûNG
    @commands.slash_command(name="claim_reward", description="T·ª± ƒë·ªông nh·∫≠n ph·∫ßn th∆∞·ªüng h√†ng ng√†y (n·∫øu c√≥).")
    async def claim_reward(self, ctx: discord.ApplicationContext):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange()))
                return

            logger.info(f"Executing /claim_reward for {ctx.author.name}")
            self.driver.get(f"{WEBSITE_URL}rewards")
            
            # C·ªë g·∫Øng t√¨m v√† nh·∫•n n√∫t claim
            claim_button = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.element_to_be_clickable((By.XPATH, Selectors.CLAIM_REWARD_BUTTON)))
            claim_button.click()
            
            # ƒê·ª£i v√† ki·ªÉm tra k·∫øt qu·∫£ (gi·∫£ ƒë·ªãnh c√≥ popup)
            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.ID, Selectors.PROMO_RESULT_POPUP)))
            
            embed = discord.Embed(title="üéÅ Nh·∫≠n th∆∞·ªüng", description=f"K·∫øt qu·∫£: **{result_popup.text}**", color=BOT_COLOR)
            await ctx.edit(embed=embed)

        except TimeoutException:
            logger.warning("Kh√¥ng t√¨m th·∫•y n√∫t 'Claim' ho·∫∑c kh√¥ng c√≥ popup k·∫øt qu·∫£. C√≥ th·ªÉ ƒë√£ nh·∫≠n ho·∫∑c kh√¥ng c√≥ th∆∞·ªüng.")
            embed = discord.Embed(title="üéÅ Nh·∫≠n th∆∞·ªüng", description="Kh√¥ng t√¨m th·∫•y n√∫t nh·∫≠n th∆∞·ªüng. C√≥ th·ªÉ b·∫°n ƒë√£ nh·∫≠n r·ªìi ho·∫∑c kh√¥ng c√≥ ph·∫ßn th∆∞·ªüng n√†o.", color=discord.Color.orange())
            await ctx.edit(embed=embed)
        except Exception as e:
            await self.handle_error(ctx, e, "claim_reward")

    # (M·ªöI) L·ªÜNH R√öT ROBUX
    @commands.slash_command(name="redeem", description="T·ª± ƒë·ªông r√∫t Robux v·ªÅ t√†i kho·∫£n c·ªßa b·∫°n.")
    async def redeem(self, ctx, amount: Option(int, "S·ªë l∆∞·ª£ng Robux mu·ªën r√∫t.", min_value=1)):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(embed=discord.Embed(title="‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p", description="B·∫°n c·∫ßn d√πng l·ªánh `/start` tr∆∞·ªõc.", color=discord.Color.orange()))
                return

            logger.info(f"Executing /redeem for {ctx.author.name} with amount {amount}")
            self.driver.get(f"{WEBSITE_URL}redeem")

            amount_input = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.XPATH, Selectors.REDEEM_AMOUNT_INPUT)))
            self.driver.execute_script("arguments[0].value = arguments[1];", amount_input, amount)
            
            # Gi·∫£ s·ª≠ trang redeem t·ª± ƒëi·ªÅn username ƒë√£ li√™n k·∫øt, n·∫øu kh√¥ng, ph·∫£i t√¨m v√† ƒëi·ªÅn th√™m
            redeem_button = self.driver.find_element(By.XPATH, Selectors.REDEEM_BUTTON)
            redeem_button.click()

            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(EC.presence_of_element_located((By.ID, Selectors.PROMO_RESULT_POPUP)))
            embed = discord.Embed(title="üí∏ R√∫t Robux", description=f"K·∫øt qu·∫£ r√∫t **{amount} R$**: **{result_popup.text}**", color=discord.Color.green())
            await ctx.edit(embed=embed)

        except Exception as e:
            await self.handle_error(ctx, e, "redeem")

    # (C·∫¢I TI·∫æN) L·ªÜNH SEND_TO
    @commands.slash_command(name="send_to", description="G·ª≠i m·ªôt tin nh·∫Øn nh√∫ng (embed) ƒë·∫øn k√™nh ho·∫∑c DM.")
    async def send_to(
        self,
        ctx: discord.ApplicationContext,
        title: Option(str, "Ti√™u ƒë·ªÅ c·ªßa tin nh·∫Øn embed.", required=True),
        description: Option(str, "N·ªôi dung/m√¥ t·∫£ c·ªßa tin nh·∫Øn embed.", required=True),
        send_dm: Option(str, "G·ª≠i tin nh·∫Øn ri√™ng (DM) cho b·∫°n?", choices=["On", "Off"]),
        channel: Option(discord.TextChannel, "K√™nh mu·ªën g·ª≠i tin nh·∫Øn v√†o.", required=False)
    ):
        await ctx.defer(ephemeral=True)
        if not channel and send_dm == "Off":
            await ctx.edit(content="‚ùå B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt n∆°i ƒë·ªÉ g·ª≠i.")
            return

        # T·∫°o embed
        embed_to_send = discord.Embed(title=title, description=description, color=BOT_COLOR)
        embed_to_send.set_footer(text=f"Tin nh·∫Øn ƒë∆∞·ª£c g·ª≠i b·ªüi {ctx.author.name}", icon_url=ctx.author.display_avatar.url)

        sent_locations, error_locations = [], []
        if channel:
            try:
                await channel.send(embed=embed_to_send); sent_locations.append(f"k√™nh {channel.mention}")
            except: error_locations.append(f"k√™nh {channel.mention}")
        if send_dm == "On":
            try:
                await ctx.author.send(embed=embed_to_send); sent_locations.append("DM c·ªßa b·∫°n")
            except: error_locations.append("DM c·ªßa b·∫°n (c√≥ th·ªÉ b·∫°n ƒë√£ ch·∫∑n)")
        
        response_parts = []
        if sent_locations: response_parts.append(f"‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn: {', '.join(sent_locations)}.")
        if error_locations: response_parts.append(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i ƒë·∫øn: {', '.join(error_locations)}.")
        await ctx.edit(content="\n".join(response_parts))

    # ... (C√°c l·ªánh qu·∫£n tr·ªã v√† l·ªánh auto_giveaway gi·ªØ nguy√™n nh∆∞ phi√™n b·∫£n tr∆∞·ªõc) ...


def setup(bot, driver):
    """H√†m thi·∫øt l·∫≠p ƒë·ªÉ bot c√≥ th·ªÉ load Cog n√†y."""
    bot.add_cog(RblxCog(bot, driver))
