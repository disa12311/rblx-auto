# bot/cogs/roblox.py

import logging
import discord
from discord.commands import Option
from discord.ext import commands, tasks
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from config import WEBSITE_URL, WAIT_TIMEOUT, GIVEAWAY_CHECK_INTERVAL_HOURS, STATUS_CHANNEL_ID

logger = logging.getLogger(__name__)

class RobloxCog(commands.Cog):
    """Cog ch·ª©a t·∫•t c·∫£ c√°c l·ªánh t∆∞∆°ng t√°c v·ªõi website rblx.earth."""
    
    def __init__(self, bot: commands.Bot, driver: WebDriver):
        self.bot = bot
        self.driver = driver
        # Kh·ªüi t·∫°o tr·∫°ng th√°i v√† t√°c v·ª• cho Auto Giveaway
        self.auto_giveaway_enabled = False
        self.giveaway_task.start() # Kh·ªüi ƒë·ªông v√≤ng l·∫∑p
        logger.info("RobloxCog ƒë√£ ƒë∆∞·ª£c t·∫£i. T√°c v·ª• Auto Giveaway ƒë√£ s·∫µn s√†ng.")

    def cog_unload(self):
        # ƒê·∫£m b·∫£o task ƒë∆∞·ª£c h·ªßy khi cog b·ªã unload ƒë·ªÉ tr√°nh l·ªói
        self.giveaway_task.cancel()

    async def handle_error(self, ctx: discord.ApplicationContext, error: Exception, command_name: str):
        """H√†m x·ª≠ l√Ω l·ªói t·∫≠p trung ƒë·ªÉ tr√°nh l·∫∑p code v√† cho tr·∫£i nghi·ªám ng∆∞·ªùi d√πng t·ªët h∆°n."""
        logger.error(f"L·ªói trong l·ªánh /{command_name}: {error}", exc_info=True)
        await ctx.edit(content=(
            f"‚ùå **ƒê√£ c√≥ l·ªói x·∫£y ra khi th·ª±c thi l·ªánh `/{command_name}`!**\n"
            "Vui l√≤ng th·ª≠ l·∫°i sau. N·∫øu l·ªói v·∫´n ti·∫øp di·ªÖn, c√≥ th·ªÉ website ƒë√£ thay ƒë·ªïi ho·∫∑c bot ƒëang ƒë∆∞·ª£c b·∫£o tr√¨."
        ))

    async def is_logged_in(self):
        """Ki·ªÉm tra xem bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng v√†o web ch∆∞a b·∫±ng c√°ch t√¨m m·ªôt ph·∫ßn t·ª≠ ch·ªâ c√≥ sau khi ƒëƒÉng nh·∫≠p."""
        try:
            self.driver.find_element(By.CLASS_NAME, "user-balance")
            return True
        except:
            return False

    # === V√íNG L·∫∂P T·ª∞ ƒê·ªòNG THAM GIA GIVEAWAY ===
    @tasks.loop(hours=GIVEAWAY_CHECK_INTERVAL_HOURS)
    async def giveaway_task(self):
        if not self.auto_giveaway_enabled:
            return
        
        if not await self.is_logged_in():
            logger.warning("Auto Giveaway: Bot ch∆∞a ƒëƒÉng nh·∫≠p, b·ªè qua l·∫ßn tham gia n√†y.")
            return
            
        logger.info("Auto Giveaway: B·∫Øt ƒë·∫ßu chu tr√¨nh tham gia giveaway...")
        try:
            self.driver.get(f"{WEBSITE_URL}giveaways")
            
            join_button_xpath = '//button[contains(text(), "Join Giveaway")]'
            join_button = WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.element_to_be_clickable((By.XPATH, join_button_xpath))
            )
            join_button.click()
            
            success_message = "‚úÖ **Auto Giveaway:** ƒê√£ t·ª± ƒë·ªông tham gia giveaway th√†nh c√¥ng!"
            logger.info(success_message)
            
            if STATUS_CHANNEL_ID:
                channel = self.bot.get_channel(STATUS_CHANNEL_ID)
                if channel:
                    await channel.send(success_message)

        except Exception as e:
            logger.error(f"Auto Giveaway: ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh tham gia: {e}", exc_info=True)
            if STATUS_CHANNEL_ID:
                channel = self.bot.get_channel(STATUS_CHANNEL_ID)
                if channel:
                    await channel.send(f"‚ùå **Auto Giveaway:** G·∫∑p l·ªói khi c·ªë g·∫Øng tham gia giveaway. Chi ti·∫øt xem trong log.")

    @giveaway_task.before_loop
    async def before_giveaway_task(self):
        await self.bot.wait_until_ready()

    # === C√ÅC L·ªÜNH SLASH COMMAND ===
    
    @commands.slash_command(name="auto_giveaway", description="B·∫≠t ho·∫∑c T·∫Øt t√≠nh nƒÉng t·ª± ƒë·ªông tham gia giveaway.")
    async def auto_giveaway(
        self,
        ctx: discord.ApplicationContext,
        status: Option(str, "Ch·ªçn ƒë·ªÉ B·∫≠t ho·∫∑c T·∫Øt.", choices=["On", "Off"], required=True)
    ):
        await ctx.defer(ephemeral=True)
        if status == "On":
            self.auto_giveaway_enabled = True
            if not self.giveaway_task.is_running():
                self.giveaway_task.start()
            await ctx.edit(content=f"‚úÖ **ƒê√£ B·∫¨T** t√≠nh nƒÉng Auto Giveaway. Bot s·∫Ω t·ª± tham gia m·ªói **{GIVEAWAY_CHECK_INTERVAL_HOURS}** gi·ªù.")
            logger.info(f"Auto Giveaway ƒë∆∞·ª£c B·∫¨T b·ªüi ng∆∞·ªùi d√πng {ctx.author.name}.")
        else:
            self.auto_giveaway_enabled = False
            await ctx.edit(content="‚ùå **ƒê√£ T·∫ÆT** t√≠nh nƒÉng Auto Giveaway.")
            logger.info(f"Auto Giveaway ƒë∆∞·ª£c T·∫ÆT b·ªüi ng∆∞·ªùi d√πng {ctx.author.name}.")

    @commands.slash_command(name="start", description="M·ªü rblx.earth v√† li√™n k·∫øt t√†i kho·∫£n Roblox c·ªßa b·∫°n.")
    async def start(
        self,
        ctx: discord.ApplicationContext,
        roblox_username: Option(str, "T√™n ng∆∞·ªùi d√πng Roblox c·ªßa b·∫°n ƒë·ªÉ li√™n k·∫øt.", required=True)
    ):
        await ctx.defer()
        try:
            if not roblox_username or not isinstance(roblox_username, str):
                await ctx.edit(content=f"‚ùå L·ªói: T√™n ng∆∞·ªùi d√πng Roblox kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
                return

            logger.info(f"Executing /start for user: {roblox_username}")
            await ctx.followup.send(f"ƒêang m·ªü `{WEBSITE_URL}` v√† chu·∫©n b·ªã li√™n k·∫øt...")

            self.driver.get(WEBSITE_URL)
            user_field = WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.XPATH, '//input[@placeholder="Enter your ROBLOX username"]'))
            )
            
            self.driver.execute_script("arguments[0].value = arguments[1];", user_field, roblox_username)
            
            link_button = self.driver.find_element(By.XPATH, '//button[contains(text(), "Link Account")]')
            link_button.click()

            WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.CLASS_NAME, "user-balance"))
            )
            await ctx.edit(content=f"‚úÖ **Th√†nh c√¥ng!** ƒê√£ li√™n k·∫øt t√†i kho·∫£n `{roblox_username}`.")

        except Exception as e:
            await self.handle_error(ctx, e, "start")

    @commands.slash_command(name="balance", description="Ki·ªÉm tra s·ªë d∆∞ Robux hi·ªán t·∫°i c·ªßa b·∫°n tr√™n rblx.earth.")
    async def check_balance(self, ctx: discord.ApplicationContext):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(content="‚ùå **L·ªói:** B·∫°n c·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p b·∫±ng l·ªánh `/start` tr∆∞·ªõc khi d√πng l·ªánh n√†y.")
                return

            logger.info(f"Executing /balance for {ctx.author.name}")
            
            balance_element = WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.CLASS_NAME, "user-balance"))
            )
            balance_text = balance_element.find_element(By.TAG_NAME, "span").text
            
            await ctx.edit(content=f"üí∞ **S·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n l√†:** `{balance_text}`")

        except Exception as e:
            await self.handle_error(ctx, e, "balance")

    @commands.slash_command(name="promo", description="Nh·∫≠p m√£ khuy·∫øn m√£i (promocode) tr√™n rblx.earth.")
    async def enter_promo(
        self,
        ctx: discord.ApplicationContext,
        code: Option(str, "M√£ khuy·∫øn m√£i b·∫°n mu·ªën nh·∫≠p.", required=True)
    ):
        await ctx.defer()
        try:
            if not await self.is_logged_in():
                await ctx.edit(content="‚ùå **L·ªói:** B·∫°n c·∫ßn ph·∫£i ƒëƒÉng nh·∫≠p b·∫±ng l·ªánh `/start` tr∆∞·ªõc khi d√πng l·ªánh n√†y.")
                return

            logger.info(f"Executing /promo with code: {code}")
            await ctx.followup.send("ƒêang ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang `Promocodes`...")
            
            promo_page_link = self.driver.find_element(By.XPATH, '//a[contains(@href, "/promocodes")]')
            promo_page_link.click()

            promo_field = WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.XPATH, '//input[@placeholder="Enter a promocode"]'))
            )
            self.driver.execute_script("arguments[0].value = arguments[1];", promo_field, code)
            
            redeem_button = self.driver.find_element(By.XPATH, '//button[contains(text(), "Redeem")]')
            redeem_button.click()

            result_popup = WebDriverWait(self.driver, WAIT_TIMEOUT).until(
                EC.presence_of_element_located((By.ID, 'swal2-title'))
            )
            await ctx.edit(content=f"‚úÖ **K·∫øt qu·∫£ nh·∫≠p m√£ `{code}`:** {result_popup.text}")
            
        except Exception as e:
            await self.handle_error(ctx, e, "promo")

    @commands.slash_command(name="send_to", description="G·ª≠i m·ªôt tin nh·∫Øn ƒë·∫øn m·ªôt k√™nh ho·∫∑c DM cho ch√≠nh b·∫°n.")
    async def send_to(
        self,
        ctx: discord.ApplicationContext,
        message: Option(str, "N·ªôi dung tin nh·∫Øn b·∫°n mu·ªën g·ª≠i.", required=True),
        send_dm: Option(str, "G·ª≠i tin nh·∫Øn ri√™ng (DM) cho b·∫°n?", choices=["On", "Off"], required=True),
        channel: Option(discord.TextChannel, "K√™nh b·∫°n mu·ªën g·ª≠i tin nh·∫Øn v√†o.", required=False)
    ):
        await ctx.defer(ephemeral=True)

        if not channel and send_dm == "Off":
            await ctx.edit(content="‚ùå **L·ªói:** B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt k√™nh ho·∫∑c b·∫≠t t√πy ch·ªçn DM.")
            return

        sent_locations = []
        error_locations = []

        if channel:
            try:
                await channel.send(message)
                sent_locations.append(f"k√™nh {channel.mention}")
            except discord.Forbidden:
                error_locations.append(f"k√™nh {channel.mention} (thi·∫øu quy·ªÅn)")
            except Exception as e:
                error_locations.append(f"k√™nh {channel.mention} (l·ªói kh√¥ng x√°c ƒë·ªãnh)")

        if send_dm == "On":
            try:
                await ctx.author.send(message)
                sent_locations.append("tin nh·∫Øn ri√™ng (DM) c·ªßa b·∫°n")
            except discord.Forbidden:
                error_locations.append("DM c·ªßa b·∫°n (b·∫°n ƒë√£ t·∫Øt nh·∫≠n tin nh·∫Øn)")
            except Exception as e:
                error_locations.append("DM c·ªßa b·∫°n (l·ªói kh√¥ng x√°c ƒë·ªãnh)")

        response_parts = []
        if sent_locations:
            response_parts.append(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng ƒë·∫øn: {', '.join(sent_locations)}.")
        if error_locations:
            response_parts.append(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i ƒë·∫øn: {', '.join(error_locations)}.")
        
        final_response = "\n".join(response_parts)
        await ctx.edit(content=final_response)

def setup(bot, driver):
    """H√†m thi·∫øt l·∫≠p ƒë·ªÉ bot c√≥ th·ªÉ load Cog n√†y."""
    bot.add_cog(RobloxCog(bot, driver))
